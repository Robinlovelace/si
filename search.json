[{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://robinlovelace.github.io/si/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://robinlovelace.github.io/si/articles/si.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Spatial interaction models with R","text":"need installed R suitable editor RStudio VSCode R plugin. See package’s README instructions installing {si} package.","code":"library(si) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2)"},{"path":"https://robinlovelace.github.io/si/articles/si.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input data","title":"Spatial interaction models with R","text":"tutorial builds reproducible guide SIMs R (Dennett 2018).1 start importing open access data representing movement zones Australia (thanks Adam Dennett making files accessible): Let’s take quick look ‘minimize’ input datasets modelling SIMs: results printed show : zones_aus represents 15 regions Australia, columns containing zone identifiers (IDs), primarily GCCSA_CODE, area zone (AREA_SQKM). minimal zones object contains region code, name, area. od_aus contains 225 rows data representing movement people zones aus. Note 255 15 squared, meaning OD dataset contains complete combination migration flows, starting zone 1GSYD 1GSYD. codes present GCCSA_CODE column aus object. first row OD dataset represents ‘intra-zonal’ migrations Greater Sydney, presumably counting number people move house somewhere region another home region. 13 columns dataset, important Orig_code, Dest_code, Flow, captured minimal od dataset. Note: useful convention ‘long form’ OD datasets first two columns contain zone IDs correspond values first column zone dataset. R package {od}, {si} builds, assumes inputs functions form. good idea verify origin destination codes od dataset match zone codes zones: clear ‘clean’ input datasets, let’s begin modelling!","code":"u1 = \"https://github.com/Robinlovelace/si/releases/download/0.0.1/zones_aus.geojson\" zones_aus = sf::read_sf(u1) u2 = \"https://www.dropbox.com/s/wi3zxlq5pff1yda/AusMig2011.csv?raw=1\" od_aus = read.csv(u2) dim(zones_aus) #> [1] 15  7 names(zones_aus) #> [1] \"GCCSA_CODE\" \"GCC_CODE16\" \"GCCSA_NAME\" \"STATE_CODE\" \"STATE_NAME\" #> [6] \"AREA_SQKM\"  \"geometry\" key_zone_names = c(\"GCCSA_CODE\", \"GCCSA_NAME\", \"AREA_SQKM\") zones = zones_aus[key_zone_names] head(zones, 2) #> Simple feature collection with 2 features and 3 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 140.9993 ymin: -37.50503 xmax: 153.6298 ymax: -28.16441 #> Geodetic CRS:  GDA94 #> # A tibble: 2 × 4 #>   GCCSA_CODE GCCSA_NAME     AREA_SQKM                                   geometry #>   <chr>      <chr>              <dbl>                         <MULTIPOLYGON [°]> #> 1 1RNSW      Rest of NSW      788443. (((153.008 -28.34026, 153.11 -28.35709, 1… #> 2 1GSYD      Greater Sydney    12368. (((151.5961 -33.16168, 151.6305 -33.17709… dim(od_aus) #> [1] 225  13 names(od_aus) #>  [1] \"Origin\"          \"Orig_code\"       \"Destination\"     \"Dest_code\"       #>  [5] \"Flow\"            \"vi1_origpop\"     \"wj1_destpop\"     \"vi2_origunemp\"   #>  [9] \"wj2_destunemp\"   \"vi3_origmedinc\"  \"wj3_destmedinc\"  \"vi4_origpctrent\" #> [13] \"wj4_destpctrent\" key_od_names = c(\"Orig_code\", \"Dest_code\", \"Flow\") od = od_aus[key_od_names] head(od, 2) #>   Orig_code Dest_code    Flow #> 1     1GSYD     1GSYD 3395015 #> 2     1GSYD     1RNSW   91031 summary(od[[1]] %in% zones[[1]]) #>    Mode    TRUE  #> logical     225 summary(od[[2]] %in% zones[[1]]) #>    Mode    TRUE  #> logical     225"},{"path":"https://robinlovelace.github.io/si/articles/si.html","id":"preparing-a-sim","dir":"Articles","previous_headings":"","what":"Preparing a SIM","title":"Spatial interaction models with R","text":"Key workings {si} package conversion geographic objects representing origins destinations OD dataset. case, already OD dataset, step less relevant. However, take step case many SIMs start without comprehensive OD dataset case. Prepare OD dataset follows: Note output duplicate columns: si_to_od() joins data origin destination objects resulting OD object.","code":"od_sim = si_to_od(origins = zones, destinations = zones) #> Maximum distance is > 100km. The 'cheap' measure is inaccurate over such #> large distances, you'd likely be better using a different 'measure'. names(od_sim) #> [1] \"O\"                      \"D\"                      \"distance_euclidean\"     #> [4] \"origin_GCCSA_NAME\"      \"origin_AREA_SQKM\"       \"destination_GCCSA_NAME\" #> [7] \"destination_AREA_SQKM\"  \"geometry\""},{"path":"https://robinlovelace.github.io/si/articles/si.html","id":"an-unconstrained-sim","dir":"Articles","previous_headings":"","what":"An unconstrained SIM","title":"Spatial interaction models with R","text":"simplistic SIM can created just based distance points:  approach, ignoring variables level trip origins destinations, results flow estimates units. learning run constrained SIMs, let’s scale result total flow see far reality, just focussing interzonal OD pairs:  results show simple unconstrained model, without parameter fitting, can explain less 20% variability flows. can better!","code":"si_power = function(d, beta) (d / 1000)^beta od_calculated = si_calculate(   od_sim,   fun = si_power,   d = distance_euclidean,   beta = -0.8   ) plot(od_calculated[\"interaction\"], logz = TRUE) #> Warning in classInt::classIntervals(v0, min(nbreaks, n.unq), breaks, warnSmallN #> = FALSE): var has infinite values, omitted in finding classes od_interzonal = od %>%   filter(Orig_code != Dest_code) od_calculated_interzonal = od_calculated %>%   filter(O != D)  scale_factor = sum(od_interzonal$Flow) /   sum(od_calculated_interzonal$interaction) od_calculated_interzonal = od_calculated_interzonal %>%    mutate(interaction_scaled = interaction * scale_factor) od_joined = inner_join(   od_calculated_interzonal,   od %>% rename(O = Orig_code, D = Dest_code)   ) #> Joining, by = c(\"O\", \"D\") od_joined %>%    ggplot() +   geom_point(aes(Flow, interaction_scaled)) cor(od_joined$Flow, od_joined$interaction_scaled)^2 #> [1] 0.1677679 od_joined %>%    mutate(decay = distance_euclidean^-0.8) %>%    mutate(decay = decay * (sum(Flow) / sum(decay))) %>%    ggplot() +   geom_point(aes(distance_euclidean, Flow)) +   geom_line(aes(distance_euclidean, decay), colour = \"red\")"},{"path":"https://robinlovelace.github.io/si/articles/si.html","id":"a-production-constrained-sim","dir":"Articles","previous_headings":"","what":"A production constrained SIM","title":"Spatial interaction models with R","text":"first logical way improve model fit run production constrained model. , ’ll first calculate total number people leaving zone use constraint_production argument:  Progress! doubled predictive ability model using ‘production constrained’ SIM, defined mathematically sim-first-principles vignette.","code":"od_originating = od_joined %>%    group_by(O) %>%    mutate(originating_per_zone = sum(Flow)) %>%    ungroup() od_constrained_p = si_calculate(   od_originating,   fun = si_power,   d = distance_euclidean,   beta = -0.8,   constraint_production = originating_per_zone   ) od_constrained_p %>%    ggplot() +   geom_point(aes(Flow, interaction)) cor(od_constrained_p$Flow, od_constrained_p$interaction)^2 #> [1] 0.3891644"},{"path":"https://robinlovelace.github.io/si/articles/si.html","id":"training-a-sim","dir":"Articles","previous_headings":"","what":"Training a SIM","title":"Spatial interaction models with R","text":"advantage flow data used example already know interaction. (raises question SIM needed, answer: test models demonstrate techniques.) can using nls() function follows:","code":"library(minpack.lm) f = Flow ~ a * (distance_euclidean)^b m = nlsLM(   formula = f,   data = od_originating,   ) #> Warning in nlsLM(formula = f, data = od_originating, ): No starting values specified for some parameters. #> Initializing 'a', 'b' to '1.'. #> Consider specifying 'start' or using a selfStart model #> Warning in nls.lm(par = start, fn = FCT, jac = jac, control = control, lower = lower, : lmdif: info = -1. Number of iterations has reached `maxiter' == 50. m #> Nonlinear regression model #>   model: Flow ~ a * (distance_euclidean)^b #>    data: od_originating #>          a          b  #>  2.182e+07 -5.801e-01  #>  residual sum-of-squares: 3.089e+10 #>  #> Number of iterations till stop: 50  #> Achieved convergence tolerance: 1.49e-08 #> Reason stopped: Number of iterations has reached `maxiter' == 50. # Nonlinear regression model #   model: Flow ~ a * (distance_euclidean)^b #    data: od_originating #          a          b  #  2.182e+07 -5.801e-01 od_joined %>%    mutate(decay = distance_euclidean^-5.801e-01) %>%    mutate(decay = decay * 2.182e+07) %>%    ggplot() +   geom_point(aes(distance_euclidean, Flow)) +   geom_line(aes(distance_euclidean, decay), colour = \"red\") od_pred = si_predict(od_originating, model = m) cor(od_pred$Flow, od_pred$interaction)^2 #> [1] 0.1746446 od_pred_const = si_predict(od_originating, model = m,   constraint_production = originating_per_zone) cor(od_pred_const$Flow, od_pred_const$interaction)^2 #> [1] 0.338483"},{"path":"https://robinlovelace.github.io/si/articles/si.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Spatial interaction models with R","text":"Dennett, Adam. 2012. “Estimating Flows Geographical Locations:’Get Started ’spatial Interaction Modelling.” UCL Working Papers Series 44 (0): 024. http://www.bartlett.ucl.ac.uk/casa/publications/working-paper-181. ———. 2018. “Modelling Population Flows Using Spatial Interaction Models.” Australian Population Studies 2 (2): 33–58. https://doi.org/10.37970/aps.v2i2.38.","code":""},{"path":"https://robinlovelace.github.io/si/articles/sims-first-principles.html","id":"what-are-sims","dir":"Articles","previous_headings":"","what":"What are SIMs?","title":"An introduction to spatial interaction models: from first principles","text":"Spatial Interaction Models (SIMs) mathematical models estimating movement spatial entities developed Alan Wilson late 1960s early 1970, considerable uptake refinement transport modelling since Boyce Williams (2015). four main types traditional SIMs (Wilson 1971): Unconstrained Production-constrained Attraction-constrained Doubly-constrained early highly influential type SIM ‘gravity model’, defined Wilson (1971) follows (paper explored many iterations formulation): \\[ T_{j}=K \\frac{W_{}^{(1)} W_{j}^{(2)}}{c_{j}^{n}} \\] “\\(T_{j}\\) measure interaction zones \\(\\) \\(W_{}^{(1)}\\) measure ‘mass term’ associated zone \\(z_i\\), \\(W_{j}^{(2)}\\) measure ‘mass term’ associated zone \\(z_j\\), \\(c_{ij}\\) measure distance, generalised cost travel, zone \\(\\) zone \\(j\\)”. \\(K\\) ‘constant proportionality’ \\(n\\) parameter estimated. Redefining \\(W\\) terms \\(m\\) \\(n\\) origins destinations respectively (Simini et al. 2012), classic definition ‘gravity model’ can written follows: \\[ T_{j}=K \\frac{m_{} n_{j}}{c_{j}^{n}} \\] purposes project, focus production-constrained SIMs. can defined follows (Wilson 1971): \\[ T_{ij} = A_iO_in_jf(c_{ij}) \\] \\(\\) balancing factor defined : \\[ A_{}=\\frac{1}{\\sum_{j} m_{j} \\mathrm{f}\\left(c_{j}\\right)} \\] \\(O_i\\) analogous travel demand zone \\(\\), can roughly approximated population. recent innovations SIMs including ‘radiation model’ Simini et al. (2012). See Lenormand, Bassolas, Ramasco (2016) comparison alternative approaches.","code":""},{"path":"https://robinlovelace.github.io/si/articles/sims-first-principles.html","id":"implementation-in-r","dir":"Articles","previous_headings":"","what":"Implementation in R","title":"An introduction to spatial interaction models: from first principles","text":"using functions packages, may worth implementing SIMs first principles, gain understanding work. code presented written functions si package developed, building Dennett (2012). aim demonstrate common way running SIMs, loop, rather using vectorised operations (used si package) can faster.  unconstrained spatial interaction model can written follows, --less arbitrary value beta can optimised later:  can plot ‘distance decay’ curve associated SIM follows:  can make production constrained follows:","code":"library(tmap) library(dplyr) library(ggplot2) zones = si::si_zones centroids = si::si_centroids od = si::si_od_census tm_shape(zones) + tm_polygons(\"all\", palette = \"viridis\") od_df = od::points_to_od(centroids) od_sfc = od::odc_to_sfc(od_df[3:6]) sf::st_crs(od_sfc) = 4326 od_df$length = sf::st_length(od_sfc) od_df = od_df %>% transmute(   O, D, length = as.numeric(length) / 1000,   flow = NA, fc = NA   ) od_df = sf::st_sf(od_df, geometry = od_sfc, crs = 4326) beta = 0.3 i = 1 j = 2 for(i in seq(nrow(zones))) {   for(j in seq(nrow(zones))) {     O = zones$all[i]     n = zones$all[j]     ij = which(od_df$O == zones$geo_code[i] & od_df$D == zones$geo_code[j])     od_df$fc[ij] = exp(-beta * od_df$length[ij])     od_df$flow[ij] = O * n * od_df$fc[ij]   } } od_top = od_df %>%    filter(O != D) %>%    top_n(n = 2000, wt = flow)  tm_shape(zones) +   tm_borders() +   tm_shape(od_top) +   tm_lines(\"flow\") summary(od_df$fc) #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> 0.0002404 0.0256166 0.0801970 0.1495649 0.2035826 1.0000000 od_df %>%    ggplot() +   geom_point(aes(length, fc)) od_dfj = left_join(   od_df,   zones %>% select(O = geo_code, all) %>% sf::st_drop_geometry() ) #> Joining, by = \"O\" od_dfj = od_dfj %>%    group_by(O) %>%    mutate(flow_constrained = flow / sum(flow) * first(all)) %>%   ungroup() sum(od_dfj$flow_constrained) == sum(zones$all) #> [1] TRUE od_top = od_dfj %>%    filter(O != D) %>%    top_n(n = 2000, wt = flow_constrained)  tm_shape(zones) +   tm_borders() +   tm_shape(od_top) +   tm_lines(\"flow_constrained\")"},{"path":"https://robinlovelace.github.io/si/articles/sims-first-principles.html","id":"validation","dir":"Articles","previous_headings":"","what":"Validation","title":"An introduction to spatial interaction models: from first principles","text":"","code":"od_dfjc = inner_join(od_dfj %>% select(-all), od) #> Joining, by = c(\"O\", \"D\") od_dfjc %>%    ggplot() +   geom_point(aes(all, flow_constrained)) cor(od_dfjc$all, od_dfjc$flow_constrained)^2 #> [1] 0.1735933"},{"path":"https://robinlovelace.github.io/si/articles/sims-first-principles.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"An introduction to spatial interaction models: from first principles","text":"Boyce, David E., Huw C. W. L. Williams. 2015. Forecasting Urban Travel: Past, Present Future. Edward Elgar Publishing. Dennett, Adam. 2012. “Estimating Flows Geographical Locations:’Get Started ’spatial Interaction Modelling.” UCL Working Papers Series 44 (0): 024. http://www.bartlett.ucl.ac.uk/casa/publications/working-paper-181. Lenormand, Maxime, Aleix Bassolas, José J. Ramasco. 2016. “Systematic Comparison Trip Distribution Laws Models.” Journal Transport Geography 51 (February): 158–69. https://doi.org/10.1016/j.jtrangeo.2015.12.008. Simini, Filippo, Marta C González, Amos Maritan, Albert-László Barabási. 2012. “Universal Model Mobility Migration Patterns.” Nature, February, 812. https://doi.org/10.1038/nature10856. Wilson, AG. 1971. “Family Spatial Interaction Models, Associated Developments.” Environment Planning 3 (January): 132. http://www.environment--planning.com/epa/fulltext/a03/a030001.pdf.","code":""},{"path":"https://robinlovelace.github.io/si/articles/validation.html","id":"validation-of-2011-od-data-for-leeds-uk","dir":"Articles","previous_headings":"","what":"Validation of 2011 OD data for Leeds, UK","title":"Validation of spatial interaction models","text":"input datasets example follows: Geographic boundary centroid data {pct} package, trip representing origins destinations Origin-destination data representing trips work 2011 Census Explanatory variables associated zones, tbc key input datasets shown  output shows 90% possible combinations OD pairs going every zone present validation dataset. maximum number unique OD pairs given OD dataset number origins multiplied number destinations. case 107 * 107 1.144910^{4} proceeding ’s worth sanity checks find : spatial distribution travel work Leeds look like? OD pairs  figure clearly shows Leeds monocentric city relatively high levels active travel near centre low levels active travel outskirts. can predict ~8% OD pairs dataset: long distance OD pairs avoiding centre. Let’s find : expected, mean length OD pairs observed Census substantially less, ’s calculating weighted mean, just 5 km: case, let’s proceed estimates travel. simplest model imagine simulate movement zones city, given knowledge many people travel work within zones Leeds total (236k), divide movement equally OD pair. case : Plotting observed number trips census data shows , expect, correlation simplistic non-model reality:  , can better? Although classic gravity model often presented type, can actually go step simpler , using linear exponential decay approximate travel, without attention paid population zone factor. let’s get stuck fit models!   simple linear model implemented code chunk predicts flow solely basis distance OD pairs. results slightly better ‘equal trips OD pairs’ approach still pretty bad, explaining 7% variability observed trips OD pairs census dataset. Furthermore, result also reveals issue fitting models OD datasets: ‘negative flow’ make sense contexts, models can predict negative values questioned. approach prevents negative values, also captures fact non-linear (near exponential) decay distance travel, SIMs exponential decay. can implement model follows: shown code , model fails converge. alternative approach follows:   can overcome using self starting function:   Another approach minpack.lm package: can make ‘production constrained’ follows:   ‘attraction constrained’ follows:","code":"si_od_census #> # A tibble: 10,536 × 18 #>    O     D       all from_home light_rail train   bus  taxi motorbike car_driver #>    <chr> <chr> <dbl>     <dbl>      <dbl> <dbl> <dbl> <dbl>     <dbl>      <dbl> #>  1 E020… E020…    66         0          0     0     0     0         1         29 #>  2 E020… E020…   742         0          0     1     5     1         1        426 #>  3 E020… E020…     2         0          0     0     0     0         0          2 #>  4 E020… E020…     9         0          0     0     0     0         0          6 #>  5 E020… E020…    50         0          0     0     3     1         0         43 #>  6 E020… E020…    23         0          0     0     0     0         0         20 #>  7 E020… E020…     4         0          0     0     0     0         0          4 #>  8 E020… E020…     2         0          0     0     0     0         0          2 #>  9 E020… E020…     1         0          0     0     0     0         0          1 #> 10 E020… E020…     3         0          0     0     0     0         0          3 #> # … with 10,526 more rows, and 8 more variables: car_passenger <dbl>, #> #   bicycle <dbl>, foot <dbl>, other <dbl>, geo_name1 <chr>, geo_name2 <chr>, #> #   la_1 <chr>, la_2 <chr> plot(si_zones$geometry) plot(si_centroids$geometry, add = TRUE) od_from_si = si_to_od(origins = si_centroids, destinations = si_centroids) nrow(si_od_census) / nrow(od_from_si) #> [1] 0.920255 si_od_census_sf = si_od_census %>%    od_to_sf(si_centroids) %>%   mutate(all, `Percent active` = (bicycle + foot) / all * 100) #> 0 origins with no match in zone ids #> 0 destinations with no match in zone ids #>  points not in od data removed.  si_od_census_sf %>%   arrange(`Percent active`) %>%    tm_shape() +   tm_lines(col = \"Percent active\", lwd = \"all\", scale = 3, palette = \"viridis\",            breaks = c(0, 0.1, 0.2, 0.4, 1) * 100, legend.lwd.show = FALSE) +   tm_scale_bar() od_pairs_with_no_travel = od_from_si %>%    filter(!paste(O, D) %in% paste(si_od_census$O, si_od_census$D)) summary(od_pairs_with_no_travel$distance_euclidean) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    3362    9407   12881   13555   17598   27761 summary(sf::st_length(si_od_census_sf)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>       0    5042    8091    8795   11751   26698 weighted.mean(sf::st_length(si_od_census_sf), w = si_od_census_sf$all) #> 5258.856 [m] od_from_si$flow_equal = sum(si_od_census$all) / nrow(od_from_si) od_joined = left_join(od_from_si, si_od_census) %>%    mutate(all = case_when(is.na(all) ~ 0, TRUE ~ all)) #> Joining, by = c(\"O\", \"D\") od_joined %>%    ggplot(aes(all, flow_equal)) +   geom_point() total = sum(si_od_census$all) m1 = lm(all ~ distance_euclidean, data = od_joined) od_joined = si_predict(od_joined, model = m1, constraint_total = total, output_col = \"flow_m1\") #> Negative values in output, setting them to zero od_joined %>%    ggplot(aes(distance_euclidean, flow_m1)) +   geom_point() od_joined %>%    ggplot(aes(all, flow_m1)) +   geom_point() sum(od_joined$flow_m1) == sum(od_joined$all, na.rm = TRUE) #> [1] TRUE cor(od_joined$all, od_joined$flow_m1, use = \"complete.obs\")^2 #> [1] 0.07686445 od_joined = od_joined %>%    mutate(distance_nonzero = case_when(     distance_euclidean == 0 ~ 50,     TRUE ~ distance_euclidean)) m2 = nls(   formula = all ~ a + distance_nonzero^b,   start = list(a = 5, b = -0.8),   data = od_joined   ) #> Error in numericDeriv(form[[3L]], names(ind), env, central = nDcentral): Missing value or an infinity produced when evaluating the model m2 = minpack.lm::nlsLM(   formula = all ~ a + distance_nonzero^b,   start = list(a = 5, b = -0.8),   data = od_joined   ) # m2 = gslnls::gsl_nls( #   all ~ a + distance_nonzero^b, #   start = list(a = 10, b = -0.08), #   # control = gslnls::gsl_nls_control(scale = \"more\"), #   control = gslnls::gsl_nls_control( solver = \"svd\"), #   data = od_joined #   ) od_joined = od_joined %>%    si_predict(m2, constraint_total = total, output_col = \"flow_m2\") od_joined %>%    ggplot(aes(distance_euclidean, flow_m2)) +   geom_point() od_joined %>%    ggplot(aes(all, flow_m2)) +   geom_point() cor(od_joined$all, od_joined$flow_m2, use = \"complete.obs\")^2 #> [1] 0.1444543 m3 = nls(   formula = all ~ SSasymp(distance_nonzero, a, b, lrc = log_alpha),   data = od_joined   ) od_joined = od_joined %>%    si_predict(m3, constraint_total = total, output_col = \"flow_m3\") od_joined %>%    ggplot(aes(distance_euclidean, flow_m3)) +   geom_point() od_joined %>%    ggplot(aes(all, flow_m3)) +   geom_point() cor(od_joined$all, od_joined$flow_m3, use = \"complete.obs\")^2 #> [1] 0.1441077 od_joined = od_joined %>%    si_predict(m3, constraint_production = origin_all, output_col = \"flow_m4\") od_joined %>%    ggplot(aes(distance_euclidean, flow_m4)) +   geom_point() od_joined %>%    ggplot(aes(all, flow_m4)) +   geom_point() cor(od_joined$all, od_joined$flow_m4, use = \"complete.obs\")^2 #> [1] 0.1299208 sum(od_joined$flow_m4) #> [1] 20237 od_joined = od_joined %>%    si_predict(m3, constraint_attraction = destination_all, output_col = \"flow_m5\") od_joined %>%    ggplot(aes(distance_euclidean, flow_m5)) +   geom_point() od_joined %>%    ggplot(aes(all, flow_m5)) +   geom_point() cor(od_joined$all, od_joined$flow_m5, use = \"complete.obs\")^2 #> [1] 0.6217939 sum(od_joined$flow_m5) #> [1] 20237 sum(od_joined$all) #> [1] 236326"},{"path":[]},{"path":"https://robinlovelace.github.io/si/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robin Lovelace. Author, maintainer. Jakub Nowosad. Author.","code":""},{"path":"https://robinlovelace.github.io/si/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lovelace R, Nowosad J (2022). si: Flexible Framework Developing Spatial Interaction Models. https://github.com/robinlovelace/si, https://robinlovelace.github.io/si/.","code":"@Manual{,   title = {si: Flexible Framework for Developing Spatial Interaction Models},   author = {Robin Lovelace and Jakub Nowosad},   year = {2022},   note = {https://github.com/robinlovelace/si, https://robinlovelace.github.io/si/}, }"},{"path":"https://robinlovelace.github.io/si/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Flexible Framework for Developing Spatial Interaction Models","text":"Install package follows:","code":"install.packages(\"remotes\") # if not already installed remotes::install_github(\"robinlovelace/si\")"},{"path":"https://robinlovelace.github.io/si/index.html","id":"si-basics","dir":"","previous_headings":"","what":"si basics","title":"Flexible Framework for Developing Spatial Interaction Models","text":"Run basic SIM follows:  just happened? created ‘OD data frame’ function si_to_od() geographic origins destinations, estimated simple ‘production constrained’ (constraint_production argument) gravity model based population origin destination zones custom distance decay function si_calculate(). example shows, package allows/encourages define use functions estimate amount interaction/movement places. approach also ‘tidy’, allowing use {si} functions {dplyr} pipelines: resulting estimates interaction, returned column interaction plotted distance graphic , resulted choice spatial interaction model inputs, allowing wide range alternative approaches implemented. flexibility key aspect package, enabling small easily modified functions implemented tested. output si_calculate) geographic object can plotted map:  si_to_od() function transforms geographic entities (typically polygons points) data frame representing full combination origin-destination pairs less max_dist meters apart. common saying data science 80% effort goes pre-processing stage. equally true spatial interaction modelling types data intensive analysis/modelling work. function return? shown output , function allows use variable origin destination data function, column names appended origin destination. Note: support OD datasets origins destinations different objects work progress (see #3).","code":"library(si) library(dplyr) # prepare OD data od = si_to_od(   origins = si_zones,        # origin locations   destinations = si_zones,   # destination locations   max_dist = 5000            # maximum distance between OD pairs   ) # specify a function gravity_model = function(beta, d, m, n) {   m * n * exp(-beta * d / 1000) }  # perform SIM od_res = si_calculate(   od,   fun = gravity_model,   d = distance_euclidean,   m = origin_all,   n = destination_all,   constraint_production = origin_all,   beta = 0.3   ) # visualize the results plot(od_res$distance_euclidean, od_res$interaction) od_res = od %>%    si_calculate(fun = gravity_model,                 m = origin_all,                n = destination_all,                d = distance_euclidean,                constraint_production = origin_all,                beta = 0.3) od_res %>%    select(interaction) Simple feature collection with 2505 features and 1 field Geometry type: LINESTRING Dimension:     XY Bounding box:  xmin: -1.743949 ymin: 53.71552 xmax: -1.337493 ymax: 53.92906 Geodetic CRS:  WGS 84 # A tibble: 2,505 × 2    interaction                                 geometry          <dbl>                         <LINESTRING [°]>  1       2177. (-1.400108 53.92906, -1.400108 53.92906)  2        632. (-1.400108 53.92906, -1.346497 53.92305)  3        556. (-1.346497 53.92305, -1.400108 53.92906)  4       1382. (-1.346497 53.92305, -1.346497 53.92305)  5        449. (-1.346497 53.92305, -1.357667 53.88306)  6        794. (-1.704658 53.91073, -1.704658 53.91073)  7        749.   (-1.704658 53.91073, -1.6876 53.90066)  8        287. (-1.704658 53.91073, -1.743949 53.88035)  9        267. (-1.704658 53.91073, -1.710657 53.87087) 10        186. (-1.704658 53.91073, -1.694076 53.86729) # … with 2,495 more rows plot(od_res[\"interaction\"], logz = TRUE) names(od) [1] \"O\"                         \"D\"                          [3] \"distance_euclidean\"        \"origin_geo_name\"            [5] \"origin_lad11cd\"            \"origin_lad_name\"            [7] \"origin_all\"                \"origin_bicycle\"             [9] \"origin_foot\"               \"origin_car_driver\"         [11] \"origin_car_passenger\"      \"origin_motorbike\"          [13] \"origin_train_tube\"         \"origin_bus\"                [15] \"origin_taxi_other\"         \"destination_geo_name\"      [17] \"destination_lad11cd\"       \"destination_lad_name\"      [19] \"destination_all\"           \"destination_bicycle\"       [21] \"destination_foot\"          \"destination_car_driver\"    [23] \"destination_car_passenger\" \"destination_motorbike\"     [25] \"destination_train_tube\"    \"destination_bus\"           [27] \"destination_taxi_other\"    \"geometry\""},{"path":"https://robinlovelace.github.io/si/index.html","id":"feedback","dir":"","previous_headings":"","what":"Feedback","title":"Flexible Framework for Developing Spatial Interaction Models","text":"interested hear approach presented package compared implementations presented links . anyone like try approach implement another language feel free get touch via issue tracker.","code":""},{"path":"https://robinlovelace.github.io/si/index.html","id":"further-reading","dir":"","previous_headings":"","what":"Further reading","title":"Flexible Framework for Developing Spatial Interaction Models","text":"details SIMs defined mathematically code first principles, see sims vignette. dive straight using {si} develop SIMs, see si Get started vignette. detailed introduction SIMs, support reproducible R code, see Adam Dennett’s 2018 paper.","code":""},{"path":"https://robinlovelace.github.io/si/index.html","id":"other-sim-packages","dir":"","previous_headings":"","what":"Other SIM packages","title":"Flexible Framework for Developing Spatial Interaction Models","text":"spflow R package spint Python package gravity R package mobility R package gravity functions scikit-mobility Python package","code":""},{"path":"https://robinlovelace.github.io/si/reference/si-package.html","id":null,"dir":"Reference","previous_headings":"","what":"si: Flexible Framework for Developing Spatial Interaction Models — si-package","title":"si: Flexible Framework for Developing Spatial Interaction Models — si-package","text":"Develop spatial interaction models (SIMs). SIMs predict amount interactions, example number trips per day, geographic entities representing trip origins destinations. SIMs can unconstrained, production-constrained, attraction-constrained doubly-constrained (Wilson 1979) <doi:10.1068/a030001>. package contains functions unconstrained doubly-constrained SIMs.","code":""},{"path":[]},{"path":"https://robinlovelace.github.io/si/reference/si-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"si: Flexible Framework for Developing Spatial Interaction Models — si-package","text":"Maintainer: Robin Lovelace rob00x@gmail.com (ORCID) Authors: Jakub Nowosad nowosad.jakub@gmail.com (ORCID)","code":""},{"path":"https://robinlovelace.github.io/si/reference/si_calculate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate flow using a pre-existing function — si_calculate","title":"Calculate flow using a pre-existing function — si_calculate","text":"Executes spatial interaction model based OD data frame user-specified function","code":""},{"path":"https://robinlovelace.github.io/si/reference/si_calculate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate flow using a pre-existing function — si_calculate","text":"","code":"si_calculate(   od,   fun,   constraint_production,   constraint_attraction,   constraint_total,   output_col = \"interaction\",   ... )"},{"path":"https://robinlovelace.github.io/si/reference/si_calculate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate flow using a pre-existing function — si_calculate","text":"od data frame representing origin-destination data, e.g. created si_to_od() fun function calculates interaction (e.g. number trips) OD pair constraint_production Character representing column od. argument, set, ensures outputs 'production constrained': total 'interaction' (e.g. n. trips) OD pairs set total zone origin go value. constraint_attraction Character representing column od. argument, set, ensures outputs 'attraction constrained': total 'interaction' (e.g. n. trips) OD pairs set sum trips destination equal mean value per destination. constraint_total Single number representing total interaction. argument, set, ensures sum interaction calculated equal value given. output_col Character string containing name new output column. \"interaction\" default. ... Arguments passed fun","code":""},{"path":"https://robinlovelace.github.io/si/reference/si_calculate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate flow using a pre-existing function — si_calculate","text":"","code":"od = si_to_od(si_zones, si_zones, max_dist = 4000) #> 1695 OD pairs remaining after removing those with a distance greater than 4000 meters: #> 15% of all possible OD pairs fun_dd = function(d = \"distance_euclidean\", beta = 0.3) exp(-beta * d / 1000) fun_dd(d = (1:5)*1000) #> [1] 0.7408182 0.5488116 0.4065697 0.3011942 0.2231302 od_dd = si_calculate(od, fun = fun_dd, d = distance_euclidean) plot(od$distance_euclidean, od_dd$interaction)  fun = function(O, n, d, beta) O * n * exp(-beta * d / 1000) od_output = si_calculate(od, fun = fun, beta = 0.3, O = origin_all,    n = destination_all, d = distance_euclidean) head(od_output) #> Simple feature collection with 6 features and 28 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.704658 ymin: 53.90066 xmax: -1.346497 ymax: 53.92906 #> Geodetic CRS:  WGS 84 #>           O         D distance_euclidean origin_geo_name origin_lad11cd #> 1 E02002330 E02002330              0.000       Leeds 001      E08000035 #> 2 E02002330 E02002331           3579.804       Leeds 001      E08000035 #> 3 E02002331 E02002330           3579.804       Leeds 002      E08000035 #> 4 E02002331 E02002331              0.000       Leeds 002      E08000035 #> 5 E02002332 E02002332              0.000       Leeds 003      E08000035 #> 6 E02002332 E02002333           1582.213       Leeds 003      E08000035 #>   origin_lad_name origin_all origin_bicycle origin_foot origin_car_driver #> 1           Leeds       2809             52         300              2170 #> 2           Leeds       2809             52         300              2170 #> 3           Leeds       2387             53         469              1573 #> 4           Leeds       2387             53         469              1573 #> 5           Leeds       2471             39         341              1666 #> 6           Leeds       2471             39         341              1666 #>   origin_car_passenger origin_motorbike origin_train_tube origin_bus #> 1                  138               10                36         89 #> 2                  138               10                36         89 #> 3                  132               16                10        126 #> 4                  132               16                10        126 #> 5                  147               19                75        166 #> 6                  147               19                75        166 #>   origin_taxi_other destination_geo_name destination_lad11cd #> 1                14            Leeds 001           E08000035 #> 2                14            Leeds 002           E08000035 #> 3                 8            Leeds 001           E08000035 #> 4                 8            Leeds 002           E08000035 #> 5                18            Leeds 003           E08000035 #> 6                18            Leeds 004           E08000035 #>   destination_lad_name destination_all destination_bicycle destination_foot #> 1                Leeds            2809                  52              300 #> 2                Leeds            2387                  53              469 #> 3                Leeds            2809                  52              300 #> 4                Leeds            2387                  53              469 #> 5                Leeds            2471                  39              341 #> 6                Leeds            3743                  80              529 #>   destination_car_driver destination_car_passenger destination_motorbike #> 1                   2170                       138                    10 #> 2                   1573                       132                    16 #> 3                   2170                       138                    10 #> 4                   1573                       132                    16 #> 5                   1666                       147                    19 #> 6                   2340                       193                    26 #>   destination_train_tube destination_bus destination_taxi_other #> 1                     36              89                     14 #> 2                     10             126                      8 #> 3                     36              89                     14 #> 4                     10             126                      8 #> 5                     75             166                     18 #> 6                    221             335                     19 #>                         geometry interaction #> 1 LINESTRING (-1.400108 53.92...     7890481 #> 2 LINESTRING (-1.400108 53.92...     2290854 #> 3 LINESTRING (-1.346497 53.92...     2290854 #> 4 LINESTRING (-1.346497 53.92...     5697769 #> 5 LINESTRING (-1.704658 53.91...     6105841 #> 6 LINESTRING (-1.704658 53.91...     5753720 plot(od$distance_euclidean, od_output$interaction)  od_pconst = si_calculate(od, fun = fun, beta = 0.3, O = origin_all,   n = destination_all, d = distance_euclidean, constraint_production = origin_all) plot(od_pconst$distance_euclidean, od_pconst$interaction)  plot(od_pconst[\"interaction\"], logz = TRUE)  od_dd = si_calculate(od, fun = fun_dd, d = distance_euclidean, output_col = \"res\") head(od_dd$res) #> [1] 1.0000000 0.3416593 0.3416593 1.0000000 1.0000000 0.6220942 od_dd = si_calculate(od, fun = fun_dd, d = distance_euclidean, constraint_total = 10) sum(od_dd$interaction) #> [1] 10"},{"path":"https://robinlovelace.github.io/si/reference/si_od_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Example OD dataset — si_od_census","title":"Example OD dataset — si_od_census","text":"Example OD dataset 2011 UK Census","code":""},{"path":"https://robinlovelace.github.io/si/reference/si_od_census.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Example OD dataset — si_od_census","text":"Regenerate data scripts data-raw directory.","code":""},{"path":"https://robinlovelace.github.io/si/reference/si_od_census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example OD dataset — si_od_census","text":"","code":"head(si_od_census) #> # A tibble: 6 × 18 #>   O      D       all from_home light_rail train   bus  taxi motorbike car_driver #>   <chr>  <chr> <dbl>     <dbl>      <dbl> <dbl> <dbl> <dbl>     <dbl>      <dbl> #> 1 E0200… E020…    66         0          0     0     0     0         1         29 #> 2 E0200… E020…   742         0          0     1     5     1         1        426 #> 3 E0200… E020…     2         0          0     0     0     0         0          2 #> 4 E0200… E020…     9         0          0     0     0     0         0          6 #> 5 E0200… E020…    50         0          0     0     3     1         0         43 #> 6 E0200… E020…    23         0          0     0     0     0         0         20 #> # … with 8 more variables: car_passenger <dbl>, bicycle <dbl>, foot <dbl>, #> #   other <dbl>, geo_name1 <chr>, geo_name2 <chr>, la_1 <chr>, la_2 <chr>"},{"path":"https://robinlovelace.github.io/si/reference/si_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict si model based on pre-trained model — si_predict","title":"Predict si model based on pre-trained model — si_predict","text":"Predict si model based pre-trained model","code":""},{"path":"https://robinlovelace.github.io/si/reference/si_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict si model based on pre-trained model — si_predict","text":"","code":"si_predict(   od,   model,   constraint_production,   constraint_attraction,   constraint_total,   output_col = \"interaction\",   ... )"},{"path":"https://robinlovelace.github.io/si/reference/si_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict si model based on pre-trained model — si_predict","text":"od data frame representing origin-destination data, e.g. created si_to_od() model model object, e.g. lm() glm() constraint_production Character representing column od. argument, set, ensures outputs 'production constrained': total 'interaction' (e.g. n. trips) OD pairs set total zone origin go value. constraint_attraction Character representing column od. argument, set, ensures outputs 'attraction constrained': total 'interaction' (e.g. n. trips) OD pairs set sum trips destination equal mean value per destination. constraint_total Single number representing total interaction. argument, set, ensures sum interaction calculated equal value given. output_col Character string containing name new output column. \"interaction\" default. ... Arguments passed fun","code":""},{"path":[]},{"path":"https://robinlovelace.github.io/si/reference/si_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict si model based on pre-trained model — si_predict","text":"","code":"od = si_to_od(si_zones, si_zones, max_dist = 4000) #> 1695 OD pairs remaining after removing those with a distance greater than 4000 meters: #> 15% of all possible OD pairs m = lm(od$origin_all ~ od$origin_bicycle) od_updated = si_predict(od, m)"},{"path":"https://robinlovelace.github.io/si/reference/si_pubs.html","id":null,"dir":"Reference","previous_headings":"","what":"Example destinations dataset: pubs in Leeds — si_pubs","title":"Example destinations dataset: pubs in Leeds — si_pubs","text":"Example dataset Leeds, UK","code":""},{"path":"https://robinlovelace.github.io/si/reference/si_pubs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Example destinations dataset: pubs in Leeds — si_pubs","text":"Regenerate data scripts data-raw directory.","code":""},{"path":"https://robinlovelace.github.io/si/reference/si_pubs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example destinations dataset: pubs in Leeds — si_pubs","text":"","code":"head(si_pubs) #> Simple feature collection with 6 features and 7 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -1.696442 ymin: 53.72551 xmax: -1.42461 ymax: 53.90583 #> Geodetic CRS:  WGS 84 #>      osm_id                  name barrier place man_made shop amenity #> 2    611105   The Mexborough Arms    <NA>  <NA>     <NA> <NA>     pub #> 4  21029699 The Black Horse Hotel    <NA>  <NA>     <NA> <NA>     pub #> 5  26124686 The Waggon and Horses    <NA>  <NA>     <NA> <NA>     pub #> 6  26124687            The Castle    <NA>  <NA>     <NA> <NA>     pub #> 19 27297278           Cross Pipes    <NA>  <NA>     <NA> <NA>     pub #> 20 27305438             Bay Horse    <NA>  <NA>     <NA> <NA>     pub #>                      geometry #> 2    POINT (-1.42461 53.7281) #> 4  POINT (-1.694605 53.90571) #> 5  POINT (-1.495596 53.72551) #> 6  POINT (-1.495613 53.72573) #> 19 POINT (-1.696442 53.90481) #> 20  POINT (-1.69363 53.90583)"},{"path":"https://robinlovelace.github.io/si/reference/si_to_od.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare OD data frame — si_to_od","title":"Prepare OD data frame — si_to_od","text":"Prepares OD data frame next used estimate movement origins destinations spatial interaction model","code":""},{"path":"https://robinlovelace.github.io/si/reference/si_to_od.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare OD data frame — si_to_od","text":"","code":"si_to_od(origins, destinations, max_dist = Inf)"},{"path":"https://robinlovelace.github.io/si/reference/si_to_od.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare OD data frame — si_to_od","text":"origins sf object representing origin locations/zones destinations sf object representing destination locations/zones max_dist Euclidean distance meters (numeric). OD pairs distance apart less returned therefore included SIM.","code":""},{"path":"https://robinlovelace.github.io/si/reference/si_to_od.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare OD data frame — si_to_od","text":"","code":"library(sf) #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE origins = si_centroids[c(1, 2, 99), ] destinations = origins plot(origins$geometry)  odsf = si_to_od(origins, destinations, max_dist = 1200) #> 7 OD pairs remaining after removing those with a distance greater than 1200 meters: #> 78% of all possible OD pairs plot(odsf) #> Warning: plotting the first 9 out of 27 attributes; use max.plot = 27 to plot all  # note: result contains intrazonal flows represented by linestrings # with a length of 0, e.g.: sf::st_coordinates(odsf$geometry[1]) #>              X        Y L1 #> [1,] -1.501878 53.81544  1 #> [2,] -1.501878 53.81544  1 # With different destinations compared with origins library(sf) origins = si_centroids[c(2, 99), c(1, 6, 7)] destinations = si_centroids[1, c(1, 6, 8)] odsf = si_to_od(origins, destinations) nrow(odsf) # no intrazonal flows #> [1] 2 plot(odsf)"},{"path":"https://robinlovelace.github.io/si/reference/si_zones.html","id":null,"dir":"Reference","previous_headings":"","what":"Example zones and centroids — si_zones","title":"Example zones and centroids — si_zones","text":"si_zones si_centroids represent administrative zones flows estimated.","code":""},{"path":"https://robinlovelace.github.io/si/reference/si_zones.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Example zones and centroids — si_zones","text":"schema data can (re-)generated using code data-raw","code":""},{"path":"https://robinlovelace.github.io/si/reference/si_zones.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example zones and centroids — si_zones","text":"","code":"si_zones #> Simple feature collection with 107 features and 13 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -1.800362 ymin: 53.699 xmax: -1.292229 ymax: 53.94589 #> Geodetic CRS:  WGS 84 #> # A tibble: 107 × 14 #>    geo_code  geo_name  lad11cd   lad_name   all bicycle  foot car_driver #>    <chr>     <chr>     <chr>     <chr>    <dbl>   <dbl> <dbl>      <dbl> #>  1 E02002330 Leeds 001 E08000035 Leeds     2809      52   300       2170 #>  2 E02002331 Leeds 002 E08000035 Leeds     2387      53   469       1573 #>  3 E02002332 Leeds 003 E08000035 Leeds     2471      39   341       1666 #>  4 E02002333 Leeds 004 E08000035 Leeds     3743      80   529       2340 #>  5 E02002334 Leeds 005 E08000035 Leeds     2995      53   170       2421 #>  6 E02002335 Leeds 006 E08000035 Leeds     3056      33   106       2549 #>  7 E02002336 Leeds 007 E08000035 Leeds     2690      35    94       2178 #>  8 E02002337 Leeds 008 E08000035 Leeds     3187      31   238       2222 #>  9 E02002338 Leeds 009 E08000035 Leeds     3155      52   343       2024 #> 10 E02002339 Leeds 010 E08000035 Leeds     2501      41   360       1552 #> # … with 97 more rows, and 6 more variables: car_passenger <dbl>, #> #   motorbike <dbl>, train_tube <dbl>, bus <dbl>, taxi_other <dbl>, #> #   geometry <POLYGON [°]> plot(si_zones$geometry) plot(si_centroids$geometry, add = TRUE)"}]
